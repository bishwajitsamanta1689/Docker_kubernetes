KUBERNETES::
-------------

node1 ~]$ kubectl run nginx --image=nginx
deployment "nginx" created
[node1 ~]$ kubectl get pods
NAME                    READY     STATUS    RESTARTS   AGE
nginx-7c87f569d-25tl4   1/1       Running   0          13s

[node1 ~]$ kubectl get pods --all-namespaces
NAMESPACE     NAME                            READY     STATUS    RESTARTS   AGE
default       nginx-7c87f569d-25tl4           1/1       Running   0          1m
kube-system   etcd-node1                      1/1       Running   0          4m
kube-system   kube-apiserver-node1            1/1       Running   0          4m
kube-system   kube-controller-manager-node1   1/1       Running   1          4m
kube-system   kube-dns-545bc4bfd4-lxlr4       3/3       Running   0          5m
kube-system   kube-proxy-48wqt                1/1       Running   0          5m
kube-system   kube-proxy-zwfgc                1/1       Running   0          4m
kube-system   kube-scheduler-node1            1/1       Running   0          4m
kube-system   weave-net-lh656                 2/2       Running   0          4m
kube-system   weave-net-sb4kh                 2/2       Running   0          5m

[node1 ~]$ kubectl get nodes
NAME      STATUS    ROLES     AGE       VERSION
node1     Ready     master    5m        v1.10.2
node2     Ready     <none>    4m        v1.10.2
[node1 ~]$ kubectl describe pods
[node1 ~]$ kubectl describe pods -o wide


Pod-defination.yml ::-
=======================

Kubernetes mainly contains 4 key sections::-
------------------------------------------------

apiVersion: v1					# IS A MANDATORY PARAMETER
kind: Pod						# IS A MANDATORY PARAMETER
metadata:						# IS A MANDATORY PARAMETER
  name:                         # name and labels are siblings of metadata so it should be aligned as per the alignment
  labels:                       # labels is a dictionary having key and value pair
     key: value ( It can be any key and value)
	 #app: myapp    (Sample key value pairs)
	 #type: frontend (Sample key value pairs)

spec:   						# IS A MANDATORY PARAMETER
  containers: 
     - name:         # any name to be given 
	   image:        # Image name of the docker container
	   env:          # if it is using any environmental value
	     - name: 
		   value:
	   

ctrl + space to list down the options

Kind: Version
--------------

Pod : v1
Service: v1
Replicaset: apps/v1
Deployment: apps/v1

Replication Controller::-
----------------------------

Replicaset and Replication Controller both are similar terms, earlier is the latest version of it. Replicaset and Replication controller have difference of
selector which match labels with the pod key value pair.

kubectl get replicaset
kubectl get pods
kubectl create -f replicaset.yml	

kubectl apply -n kube-system -f \
    "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 |tr -d '\n')"

kubectl describe replicaset
kubectl get pods -o wide
kubectl replace -f replication.yml
kubectl scale --replicas=4 -f replication.yml
kubectl delete replicaset my-app-replicaset
kubectl delete my-first-pod
kubectl get all

root@k8smaster:~/kube_yaml# kubectl rollout history deployment/my-new-deployment
deployment.extensions/my-new-deployment
REVISION  CHANGE-CAUSE
1         <none>

root@k8smaster:~/kube_yaml# kubectl rollout status deployment/my-new-deployment
deployment "my-new-deployment" successfully rolled out

root@k8smaster:~/kube_yaml# kubectl get replicaset
NAME                           DESIRED   CURRENT   READY   AGE
my-new-deployment-6c8c547dc4   0         0         0       30m
my-new-deployment-7bd984979d   5         5         5       27m



Create::-
----------

kubectl create -f deployment-defination.yml
kubectl create -f deployment_1.yml --record

Get::-
------

kubectl get deployments
kubectl get all

Update::-
-----------

kubectl apply -f deployment-defination.yml
kubectll set image deployment/myapp-deployment nginx=nginx:1.9.1

Status::-
----------

kubectl rollout status deployment/myapp-deployment
kubectl rollout history deployment/myapp-deployment

Rollback::-
-------------

kubectl rollout undo deployment/myapp-deployment

configure pods on New Nodes::- (Validation)
-------------------------------

kubectl run nginx-lab-newnode --image=nginx --port 80 -replicas=3


Token List::-
-------------

root@k8smaster:~/kubernetes_yaml_files# kubeadm token list
TOKEN                     TTL       EXPIRES                     USAGES                   DESCRIPTION                                                EXTRA GROUPS
nhd6mv.y1p1j8jfraq8ijz1   8h        2018-11-14T03:39:46-08:00   authentication,signing   The default bootstrap token generated by 'kubeadm init'.   system:bootstrappers:kubeadm:default-node-token


kubeadm join --discovery-token-unsafe-skip-ca-verification --token=102952.1a7dd4cc8d1f4cc5 172.17.0.62:6443

Kubernetes Cluster::-
---------------------

kubectl config view
kubectl cluster-info
kubectl cluster-info dump
root@k8smaster:~# kubectl config get-clusters
NAME
kubernetes

Join a New Node in Kubernetes Cluster::-
------------------------------------------

kubeadm token create --print-join-command
kubeadm join 192.168.1.101:6443 --token tokentoken.lalalalaqyd3kavez --discovery-token-ca-cert-hash sha256:complexshaoverhere

Kubernetes Nodes Utilization::-
--------------------------------

alias util='kubectl get nodes --no-headers | awk '\''{print $1}'\'' | xargs -I {} sh -c '\''echo {} ; kubectl describe node {} | grep Allocated -A 5 | grep -ve Event -ve Allocated -ve percent -ve -- ; echo '\'''

root@k8smaster:~/kubernetes_yaml_files# util
k8smaster
  Resource                       Requests    Limits
  cpu                            770m (19%)  0 (0%)
  memory                         140Mi (1%)  340Mi (4%)

k8sslave01
  Resource                       Requests    Limits
  cpu                            620m (15%)  0 (0%)
  memory                         600Mi (7%)  0 (0%)

k8sslave02
  Resource  Requests    Limits
  cpu       120m (3%)   500m (12%)
  memory    100Mi (1%)  200Mi (2%)

Pods Utilization::-
--------------------
  
# kubectl get po --all-namespaces -o=jsonpath="{range .items[*]}{.metadata.namespace}:{.metadata.name}{'\n'}{range .spec.containers[*]}  {.name}:{.resources.requests.cpu}{'\n'}{end}{'\n'}{end}"

root@k8smaster:~/kubernetes_yaml_files# kubectl get nodes -o=jsonpath="{range .items[*]}{.metadata.name}{'\t'}{.status.allocatable.memory}{'\t'}{.status.allocatable.cpu}{'\n'}{end}"
k8smaster       8073196Ki       4
k8sslave01      8073196Ki       4
k8sslave02      8072688Ki       4


Namespace Create::-
----------------------

# kubectl create namespace devops-kubernetes
# kubectl create -f pod_create_4.yml --namespace=devops-kubernetes
  pod/myapp created
# root@k8smaster:~/kubernetes_yaml_files# kubectl get pods -n devops-kubernetes
NAME           READY   STATUS    RESTARTS   AGE
my-first-pod   1/1     Running   0          3m41s
myapp          1/1     Running   0          51s
  


  
  


Trouble Shooting::-
-------------------

root@k8smaster:~/kubernetes_yaml_files# kubectl describe nodes k8smaster | grep Taint
Taints:             node-role.kubernetes.io/master:NoSchedule
root@k8smaster:~/kubernetes_yaml_files# #kubectl taint nodes --all node-role.kubernetes.io/master-
root@k8smaster:~/kubernetes_yaml_files# kubectl get nodes
NAME         STATUS     ROLES    AGE     VERSION
k8smaster    NotReady   master   9m20s   v1.12.1
k8sslave01   NotReady   <none>   6m45s   v1.12.1
root@k8smaster:~/kubernetes_yaml_files# kubectl describe nodes k8sslave01 | grep Taint
Taints:             node.kubernetes.io/not-ready:NoSchedule
root@k8smaster:~/kubernetes_yaml_files# kubectl taint nodes k8smaster node-role.kubernetes.io/master-
node/k8smaster untainted
error: taint "node-role.kubernetes.io/master:" not found
root@k8smaster:~/kubernetes_yaml_files# kubectl taint nodes k8sslave01 node.kubernetes.io/not-ready
error: at least one taint update is required
root@k8smaster:~/kubernetes_yaml_files# kubectl taint nodes k8sslave01 node.kubernetes.io/not-ready-
node/k8sslave01 untainted

Kubernetes Dashboard::-
-----------------------

#kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml